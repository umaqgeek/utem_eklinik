/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//package eklinik;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.UUID;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.List;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;

//import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.html.WebColors;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import java.awt.Desktop;

/**
 *
 * @author Hadi Akmal
 */
public class NewJFrame extends javax.swing.JFrame {
    
    String faculty = null; //public var

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "FTMK", "FKP", "FKM", "FKEKK", "FKE", "FPTT", "FTK", "ALL" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Select a faculty : ");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 931, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 512, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>                        

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
        
    	Document document = new Document();
        
        //document.setMargins(30, 14, 50, 14);
        //String faculty = null;
        jTextArea1.setText(""); //clear textarea
        Object selectedItem = jComboBox1.getSelectedItem();
		faculty = selectedItem.toString();
        if (selectedItem != null)
        {
		try {       
					long startTime = System.nanoTime(); 
			        PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream("ECSS_RPT_001.pdf"));
	            
		            document.open(); 


		            //buat column plg banyak dulu untuk mudahkan design

		            PdfPCell cell;
	                
                    //jTextArea1.append(faculty);
                    
                    //initialize mysql con and var data type
                    Integer tot_by_fac = null;
                    ResultSet rs;
                    ResultSet rs_block;
                    ResultSet rs_code;
                    String query = null;
                    String remove_last_char;
                    String connectionURL;
                    String chapter_total_result = null;
                    String male_total_result = null;
                    String female_total_result = null;
                    
                    //initialize pdf
                    Font teks = new Font(Font.HELVETICA, 18, Font.BOLD);
                    Color orange = WebColors.getRGBColor("Orange");
                    Color magenta = WebColors.getRGBColor("#FF00FF");
                    Color cyan = WebColors.getRGBColor("#00FFFF");


                    connectionURL = "jdbc:mysql://127.0.0.1/servercis?user=root&password=";
                    Connection conn = DriverManager.getConnection(connectionURL);
                    PreparedStatement st1 = conn.prepareStatement(connectionURL);
                    Statement st = conn.createStatement();
                    Statement st2 = conn.createStatement();
                    
                    
                    try {
                    	

                    	HashMap<String, String> chapter_map = new HashMap<>();
                        ArrayList<String> chapter_list = new ArrayList<String>();
                        ArrayList<String> invalid_record_list = new ArrayList<String>();
                        query = "SELECT * FROM `icd10_chapters` ORDER  BY `icd10_chapters`.`Id` ASC";
                        rs = st1.executeQuery(query);
                        
                        while (rs.next()) {
                        	chapter_map.put(rs.getString("id"), rs.getString("name"));
                            chapter_list.add(rs.getString("id")); //assign mysql result to list
                            chapter_list.add(rs.getString("name")); //assign mysql result to list
                            // Integer icd10_id_result = rs.getInt("Id");
                            //String icd10_name_result = rs.getString("name");

                        }
                        
                        if ("ALL".equals(faculty)){ //no prepared statement in this loop for faculty == ALL
                        	query = "SELECT COUNT(*) AS tot_by_fac FROM `lhr_diagnosis` ld, icd10_codes ic WHERE ic.icd10_code = ld.DiagnosisCd";
                            rs = st.executeQuery(query);
                        
                        }else{ // prepared statement goes here for particular faculty
                            query = "SELECT COUNT(*) AS tot_by_fac FROM `lhr_diagnosis` ld, icd10_codes ic WHERE `ld`.`LOCATION_CODE` = ? AND ic.icd10_code = ld.DiagnosisCd";
                            st1 = conn.prepareStatement(query);
                            st1.setString(1, faculty);
                            rs = st1.executeQuery();
                        	
                        }
                        

                        
                        while (rs.next()) {
                            tot_by_fac = rs.getInt("tot_by_fac");
                        }

                        jTextArea1.append("Total patient by faculty : " + tot_by_fac);
                        jTextArea1.append("\nTotal patient by chapter : \n\n");
                        
                        PdfPTable header_table = new PdfPTable(2);
                        float[] columnWidths = {2f, 1.19f};
                        header_table.setWidths(columnWidths);
                        // 2 columns.
                        Image logo = Image.getInstance("logoUTeMPNG.png");
                        logo.scaleAbsolute(230, 100); 
                        //logo.scalePercent(7.3f);
                        
                        PdfPCell cell1 = new PdfPCell(logo);
                        cell1.setBorder(Rectangle.NO_BORDER);
                        //cell1.setLeading(15f, 0.3f);
                        header_table.addCell(cell1);
                        
                        PdfPCell cell2 = new PdfPCell(new Paragraph("Universiti Teknikal Malaysia Melaka\nHang Tuah Jaya, \n76100 Durian Tunggal, \nMelaka, Malaysia."));
                        cell2.setBorder(Rectangle.NO_BORDER);
                        //cell2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        cell2.setLeading(15f, 0.3f);
                        header_table.addCell(cell2);
                        
                        
                        
                        PdfPCell cell3 = new PdfPCell(new Paragraph("\nDiagnosis Report by Faculty", teks));
                        cell3.setBorder(Rectangle.NO_BORDER);
                        PdfPCell cell4 = new PdfPCell(new Paragraph("\n\n\n"));
                        cell4.setBorder(Rectangle.NO_BORDER);
                        header_table.addCell(cell3);
                        header_table.addCell(cell4);
                        
                        PdfPCell cell5 = new PdfPCell(new Paragraph("Faculty : " + faculty));
                        cell5.setBorder(Rectangle.NO_BORDER);
                        
                        String timeStamp = new SimpleDateFormat("dd-MM-yyyy h:mm a").format(Calendar.getInstance().getTime()); 
                        PdfPCell cell6 = new PdfPCell(new Paragraph("Date : " + timeStamp));
                        cell6.setBorder(Rectangle.NO_BORDER);
                        header_table.addCell(cell5);
                        header_table.addCell(cell6);
                        
                        PdfPCell cell8 = new PdfPCell(new Paragraph("Report ID : ECSS_RPT_001")); //remove with space and dash
                        cell8.setBorder(Rectangle.NO_BORDER);
                        header_table.addCell(cell8);
                        
                        PdfPCell cell7 = new PdfPCell(new Paragraph());
                        cell7.setBorder(Rectangle.NO_BORDER);
                        header_table.addCell(cell7);

                        document.add(header_table);
                        
                        //temp validation         
                              //Check for invalid data in DiagnosisCd column
                              query = "SELECT DiagnosisCd from lhr_diagnosis LEFT JOIN icd10_codes ON lhr_diagnosis.DiagnosisCd = icd10_codes.icd10_code WHERE icd10_code IS NULL AND LOCATION_CODE = ?";
                              
                              st1 = conn.prepareStatement(query); //recreate statement
                              st1.setString(1, faculty); // set input parameter
                              rs = st1.executeQuery();
                              
                              while (rs.next()) {
                            	  invalid_record_list.add(rs.getString("DiagnosisCd")); //assign mysql result to list
                              }
                              
                        //document.add(new Phrase("\n\n\n\n\n\n\n\n\n"));
                        Paragraph paragraph1 = new Paragraph();
                        paragraph1.add("");
                        paragraph1.setSpacingAfter(12);
                        document.add(paragraph1);                              
                         
                        //Table header title 
                        PdfPTable table = new PdfPTable(5);
                        table.setWidths(new float[]{ 0.57f, 4f, 0.57f, 0.57f, 0.63f});
                        table.setLockedWidth(true);
                        table.setTotalWidth(document.right() - document.left());
                        cell = new PdfPCell(new Phrase("Chapter"));
                        cell.setRowspan(2);
                        table.addCell(cell);
                        cell = new PdfPCell(new Phrase("Description"));
                        cell.setRowspan(2);
                        table.addCell(cell);
                        cell = new PdfPCell(new Phrase("Gender"));
                        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                        cell.setColspan(2);
                        table.addCell(cell);
                        cell = new PdfPCell(new Phrase("Total"));
                        cell.setRowspan(2);
                        table.addCell(cell);
                        
                        table.addCell("M");
                        table.addCell("F");


                        document.add(table); 
                        //Table header title end 
                        
                        

                        
                        int i = 0;
                        int n = 0;
                        
                        Map<String, PdfPTable> reportObj = new HashMap<String, PdfPTable>();
                        
                        // only 1 chapter is needed with for loop
                        for (i = 1; i <= chapter_map.size(); i++){ // chapter_map.size() is total of keys during .put                               


                              jTextArea1.append("---------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
                              
                              
                              if ("ALL".equals(faculty)){ //no prepared statement in this loop for faculty == ALL
                            	  query = "SELECT COUNT(DiagnosisCd) AS count from lhr_diagnosis ld, icd10_codes ic WHERE DiagnosisCd REGEXP '^[a-zA-Z0-9]+$'  AND substring(DiagnosisCd,1,2) = '"+ String.format("%02d", i) +"' AND ic.icd10_code = ld.DiagnosisCd";
                                  rs = st.executeQuery(query);
                              
                              }else{ // prepared statement goes here for particular faculty
                            	  query = "SELECT COUNT(DiagnosisCd) AS count from lhr_diagnosis ld, icd10_codes ic WHERE DiagnosisCd REGEXP '^[a-zA-Z0-9]+$' AND ic.icd10_code = ld.DiagnosisCd AND substring(DiagnosisCd,1,2) = '"+ String.format("%02d", i) +"' AND LOCATION_CODE = ?";
                                  st1 = conn.prepareStatement(query); //recreate statement
                                  st1.setString(1, faculty); // set input parameter
                                  rs = st1.executeQuery();
                              }
                              
                              

                              
                              while (rs.next()) {
                                  chapter_total_result = rs.getString("count");
                              }
      
                              jTextArea1.append(String.format("%02d", i) + "   " + chapter_map.get(String.format("%02d", i)) + "   " + chapter_total_result);
                              
                              //System.out.format("Current cursor " +i + ": %f%n", writer.getVerticalPosition(true));
                              if (writer.getVerticalPosition(true) <= 90.000000) { //if chapter title is at the bottom then push it to new page. 112.000000 is title cursor for first page & 90.000000 is chapter title cursor other than 1st page.
                            	  document.newPage();
                              }
                          	
                              //chapter row
                              reportObj.put("chapter", new PdfPTable(5)); //declare new object. this object will be overwrite by new similar object name during the next loop
                              reportObj.get("chapter").getDefaultCell().setBorder(0);
                              reportObj.get("chapter").setWidths(new float[]{ 0.57f, 4f, 0.57f, 0.57f, 0.63f}); //guna float untuk precisekan column width
                              reportObj.get("chapter").setLockedWidth(true);
                              reportObj.get("chapter").setTotalWidth(document.right() - document.left());
                          	
                              //chapter row
                              cell = new PdfPCell(new Phrase(String.format("%02d", i)));
                              cell.setHorizontalAlignment(Element.ALIGN_CENTER); 
                              cell.setColspan(1);
                              cell.setBackgroundColor(orange);
                              reportObj.get("chapter").addCell(cell);
                              cell = new PdfPCell(new Phrase(chapter_map.get(String.format("%02d", i))));
                              cell.setBackgroundColor(orange);
                              cell.setColspan(1);
                              reportObj.get("chapter").addCell(cell);
                              
                              if ("ALL".equals(faculty)){ //no prepared statement in this loop for faculty == ALL
                            	  query = "SELECT COUNT(DiagnosisCd) AS COUNT, SUM(CASE WHEN PERSON_STATUS = 'L' THEN 1 ELSE 0 END) AS M, SUM(CASE WHEN PERSON_STATUS = 'P' THEN 1 ELSE 0 END) AS F FROM lhr_diagnosis ld, icd10_codes ic WHERE DiagnosisCd REGEXP '^[a-zA-Z0-9]+$'  AND ic.icd10_code = ld.DiagnosisCd AND substring(DiagnosisCd,1,2) = '" + String.format("%02d", i) + "'";
                                  rs = st.executeQuery(query);
                              
                              }else{ // prepared statement goes here for particular faculty
                            	  query = "SELECT SUM(CASE WHEN PERSON_STATUS = 'L' THEN 1 ELSE 0 END) AS M, SUM(CASE WHEN PERSON_STATUS = 'P' THEN 1 ELSE 0 END) AS F FROM lhr_diagnosis ld, icd10_codes ic WHERE DiagnosisCd REGEXP '^[a-zA-Z0-9]+$' AND ic.icd10_code = ld.DiagnosisCd AND substring(DiagnosisCd,1,2) = '" + String.format("%02d", i) + "' AND LOCATION_CODE = ? GROUP BY LOCATION_CODE";
                                  st1 = conn.prepareStatement(query); //recreate statement
                                  st1.setString(1, faculty); // set input parameter
                                  rs = st1.executeQuery();
                              }
                              
                              while (rs.next()) {
                                  male_total_result = rs.getString("M");
                                  female_total_result = rs.getString("F");
                                  System.out.println(male_total_result);
                              }
                              
                              cell = new PdfPCell(new Phrase(male_total_result));
                              cell.setBackgroundColor(orange);
                              cell.setColspan(1);
                              reportObj.get("chapter").addCell(cell);
                              
                              cell = new PdfPCell(new Phrase(female_total_result));
                              cell.setBackgroundColor(orange);
                              cell.setColspan(1);
                              reportObj.get("chapter").addCell(cell);                             
                              
                              cell = new PdfPCell(new Phrase(chapter_total_result));
                              cell.setHorizontalAlignment(Element.ALIGN_CENTER); 
                              cell.setBackgroundColor(orange);
                              cell.setColspan(1);
                              reportObj.get("chapter").addCell(cell);
                              
                              document.add(reportObj.get("chapter"));
                              
                              if (!"0".equals(chapter_total_result)){	// check chapter_total_result. if != 0 enter loop
                              
                                  jTextArea1.append("\n\n\tTotal Patient by Block :");
                                  
                                  //block row     
                                  reportObj.put("block_title", new PdfPTable(6));
                                  reportObj.get("block_title").getDefaultCell().setBorder(0);
                                  reportObj.get("block_title").setWidths(new float[]{ 4.45f, 3, 3.5f, 3, 30, 5.9f});
                                  reportObj.get("block_title").setLockedWidth(true);
                                  reportObj.get("block_title").setTotalWidth(document.right() - document.left());
            	                  
                                  //block row
                                  cell = new PdfPCell(new Phrase(""));
                                  cell.setColspan(1);
                                  cell.setBorder(Rectangle.NO_BORDER); 
                                  reportObj.get("block_title").addCell(cell);
                                  cell = new PdfPCell(new Phrase("Total Patient by Block :"));
                                  cell.setColspan(6);
                                  cell.setBackgroundColor(magenta);
                                  reportObj.get("block_title").addCell(cell);                                 
                                  document.add(reportObj.get("block_title"));
                                  
                                  if ("ALL".equals(faculty)){
                                	  System.out.println(faculty);
                                	  query = "SELECT DiagnosisCd, idc, id, name, total FROM icd10_blocks, (SELECT DiagnosisCd, substring(DiagnosisCd,3,3) AS diag, count(*) as total from lhr_diagnosis ld, icd10_codes ic WHERE DiagnosisCd REGEXP '^[a-zA-Z0-9]+$' AND ic.icd10_code = ld.DiagnosisCd group by substring(DiagnosisCd,3,3)) AS lolcat WHERE id = diag AND idc = '"+ String.format("%02d", i) +"' ";
                                	  rs_block = st.executeQuery(query);

                                  
                                  }else{
                                      query = "SELECT DiagnosisCd, idc, id, name, total FROM icd10_blocks, (SELECT DiagnosisCd, substring(DiagnosisCd,3,3) AS diag, count(*) as total from lhr_diagnosis ld, icd10_codes ic WHERE DiagnosisCd REGEXP '^[a-zA-Z0-9]+$' AND ic.icd10_code = ld.DiagnosisCd AND LOCATION_CODE = ? group by substring(DiagnosisCd,3,3)) AS lolcat WHERE id = diag AND idc = '"+ String.format("%02d", i) +"'";
                                      
                                      st1 = conn.prepareStatement(query); //recreate statement
                                      st1.setString(1, faculty); // set input parameter
                                      rs_block = st1.executeQuery();
                                	  
                                  }
                                  

                                  
                                                               
                                  
                                  while (rs_block.next()) {

                                      String block_id_result = rs_block.getString("id");
                                      String block_name_result = rs_block.getString("name");
                                      String block_total_result = rs_block.getString("total");
                                      //jTextArea1.append("\n\t" + block_id_result + "   " + block_name_result + "   "+ block_total_result +"\n");
                                      jTextArea1.append("\n\t" + block_id_result + "   " + block_name_result + "   "+ block_total_result +"\n");
                                                                
                                      reportObj.put("block", new PdfPTable(6));
                                      
                                      reportObj.get("block").getDefaultCell().setBorder(0);
                                      reportObj.get("block").setWidths(new float[]{ 5.3f, 3.1f, 3.5f, 3, 38.5f, 5.9f});
                                      reportObj.get("block").setLockedWidth(true);
                                      reportObj.get("block").setTotalWidth(document.right() - document.left());	
                                      //System.out.println("loop block nombor :" + i);
                                      cell = new PdfPCell(new Phrase(""));
                                      cell.setColspan(1);
                                      cell.setBorder(Rectangle.NO_BORDER);
                                      reportObj.get("block").addCell(cell);
                                      cell = new PdfPCell(new Phrase(block_id_result));
                                      cell.setColspan(1);
                                      cell.setBackgroundColor(magenta);
                                      reportObj.get("block").addCell(cell);
                                      cell = new PdfPCell(new Phrase(block_name_result));
                                      cell.setColspan(3);
                                      cell.setBackgroundColor(magenta);
                                      reportObj.get("block").addCell(cell);
                                      cell = new PdfPCell(new Phrase(block_total_result));
                                      cell.setColspan(1);
                                      cell.setBackgroundColor(magenta);
                                      reportObj.get("block").addCell(cell);                                      
                                      document.add(reportObj.get("block"));

                                      remove_last_char = block_id_result.substring(0, block_id_result.length()-1); //remove last character in 'id' resultset retrieve from icd10_blocks table. A00 = A0

                                      jTextArea1.append("\n\t\tTotal Patient by Code :"); 
                                      
                                      if(n != i){ //To make sure code title will be display only one time for every chapter. Check whether n == previous record of i. If not similar then display Code Title
                                    	  
                                    	  
                                          if (writer.getPageNumber() == 1 && writer.getVerticalPosition(true) <= 78.000000){ //This to check block records above for page 1
                                        	  //System.out.format("Current cursor " +i + ": %f%n", writer.getVerticalPosition(true));  
                                        	  document.newPage();                                      	  
                                          }
                                          
                                    	  
                                          if (writer.getPageNumber() !=1 && writer.getVerticalPosition(true) <= 74.000000) { ////This to check block records above other than page 1
                                        	  document.newPage();
                                          }
                                    	  
                                          // code row
                                          reportObj.put("code_title", new PdfPTable(6));
                                          reportObj.get("code_title").getDefaultCell().setBorder(0);
                                          reportObj.get("code_title").setWidths(new float[]{ 4.05f, 3, 3.5f, 3, 30, 5.9f});
                                          reportObj.get("code_title").setLockedWidth(true);
                                          reportObj.get("code_title").setTotalWidth(document.right() - document.left());	
                                          
                                          cell = new PdfPCell(new Phrase(""));
                                          cell.setColspan(2);
                                          cell.setBorder(Rectangle.NO_BORDER); 
                                          reportObj.get("code_title").addCell(cell);
                                          cell = new PdfPCell(new Phrase("Total Patient by Code :"));
                                          cell.setColspan(4);
                                          cell.setBackgroundColor(cyan);
                                          reportObj.get("code_title").addCell(cell);                                      
                                          document.add(reportObj.get("code_title"));
                                          n = i;
                                    	  
                                      }

                                      if ("ALL".equals(faculty)){
                                    	  query = "SELECT ld.diagnosisCd, substring(DiagnosisCd,6,5) as icd10_code_strip, ic.icd10_desc, ib.Id AS icd10_block, COUNT(DiagnosisCd) as total from lhr_diagnosis ld, icd10_blocks ib, icd10_codes ic WHERE DiagnosisCd REGEXP '^[a-zA-Z0-9]+$' AND substring(DiagnosisCd,3,3) ='"+ block_id_result +"' AND ib.Id = '"+ block_id_result +"' AND ic.icd10_code = ld.DiagnosisCd  group by DiagnosisCd";
                                          rs_code = st1.executeQuery(query);
                                      
                                      }else{
                                          query = "SELECT ld.diagnosisCd, substring(DiagnosisCd,6,5) as icd10_code_strip, ic.icd10_desc, ib.Id AS icd10_block, COUNT(DiagnosisCd) as total from lhr_diagnosis ld, icd10_blocks ib, icd10_codes ic WHERE DiagnosisCd REGEXP '^[a-zA-Z0-9]+$' AND substring(DiagnosisCd,3,3) ='"+ block_id_result +"' AND ib.Id = '"+ block_id_result +"' AND ic.icd10_code = ld.DiagnosisCd AND LOCATION_CODE = ? group by DiagnosisCd";
                                          
                                          st1 = conn.prepareStatement(query);
                                          st1.setString(1, faculty); // set input parameter
                                          rs_code = st1.executeQuery();
                                          //rs_code = st2.executeQuery(query);  
                                      }

                                      



                                      
                                      while (rs_code.next()) {
                                          
                                          String code_strip_result = rs_code.getString("icd10_code_strip");
                                          String code_desc_result = rs_code.getString("icd10_desc");
                                          String code_total_result = rs_code.getString("total");
                                          jTextArea1.append("\n\t\t" + code_strip_result + "\t" + code_desc_result + "\t"+ code_total_result);
                                          //jTextArea1.append("\n\t\t" + code_strip_result + "\t" + code_desc_result + "\t"+ code_total_result);
                                          

                                          reportObj.put("code", new PdfPTable(6));
                                          //System.out.println("loop nombor :" + i);
                                          reportObj.get("code").getDefaultCell().setBorder(0);
                                          reportObj.get("code").setWidths(new float[]{ 4.55f, 3.9f, 4.5f, 3, 37.5f, 5.9f});
                                          reportObj.get("code").setLockedWidth(true);
                                          reportObj.get("code").setTotalWidth(document.right() - document.left());	
                                      

                                          cell = new PdfPCell(new Phrase(""));
                                          cell.setColspan(2);
                                          cell.setBorder(Rectangle.NO_BORDER); 
                                          reportObj.get("code").addCell(cell);
                                          cell = new PdfPCell(new Phrase(code_strip_result));
                                          cell.setColspan(1);
                                          cell.setBackgroundColor(cyan);
                                          reportObj.get("code").addCell(cell);
                                          cell = new PdfPCell(new Phrase(code_desc_result));
                                          cell.setColspan(2);
                                          cell.setBackgroundColor(cyan);
                                          reportObj.get("code").addCell(cell);
                                          cell = new PdfPCell(new Phrase(code_total_result));
                                          cell.setColspan(1);
                                          cell.setBackgroundColor(cyan);
                                          reportObj.get("code").addCell(cell);
                                          document.add(reportObj.get("code"));  
                                          
                                      }// code loop end
                                      
                                      if (writer.getVerticalPosition(true) <= 88.000000) { //Block title at first page use 88.000000
                                    	  //document.newPage();
                                      }
                                      //System.out.format("Current cursor " +i + ": %f%n", writer.getVerticalPosition(true));
                                      
                                      
                                  }// block loop end
                              }// if bracket end
                              
                              
                              //jTextArea1.append("\n---------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
                              jTextArea1.append("\n\n");
                        } // for loop end       

                        document.add(new Phrase("\nTotal Diagnosis: " + tot_by_fac));
                        if (invalid_record_list.size() != 0){
                        	document.add(new Phrase("\n"));
                        	document.add(new Phrase(invalid_record_list.size() + " invalid records founded in table `lhr_diagnosis`.`DiagnosisCd` : " + invalid_record_list));
                        }

                        long estimatedTime = System.nanoTime() - startTime;   
                        double seconds = (double)estimatedTime / 1000000000.0;
                        document.add(new Phrase("\nTime taken to generate this report : " + seconds + " seconds."));
                    }
                    catch (Exception e) {
                        System.err.println("Got an exception! ");
                        System.err.println(e.getMessage());
                    }
                    
                    
                    document.close();
                    
                    conn.close();
                    
                    // open pdf file platform independent
                    if (Desktop.isDesktopSupported()) {
                        try {
                            File myFile = new File("ECSS_RPT_001.pdf"); 
                            Desktop.getDesktop().open(myFile);
                        } catch (IOException ex) {
                            // no application registered for PDFs
                        }
                    }
                    
                }// if for select box end
                
                
                
                
                // jComboBox1ActionPerformed end bracket   

         catch (SQLException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
         }
		 catch (Exception e) {// catch itextpdf exception
            e.printStackTrace();
         }
             
        }
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}
